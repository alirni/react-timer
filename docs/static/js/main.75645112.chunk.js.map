{"version":3,"sources":["component/Seconds.tsx","component/Timer.tsx","component/TimerContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","makeStyles","theme","container","display","margin","secondsBox","height","backgroundColor","position","borderRadius","transition","boxShadow","secondsNumber","Seconds","props","classes","useState","temp","i","Number","moment","format","push","seconds","setSeconds","useEffect","setTimeout","length","className","style","width","flexDirection","time","fontSize","Timer","timeFormat","now","setNow","setInterval","useStyles","left","right","bottom","top","justifyContent","alignItems","timerBody","border","color","legContainer","leg","TimerContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSASMA,EAASC,aAAW,SAAAC,GAAK,MAAK,CAClCC,UAAW,CACTC,QAAS,OACTC,OAAQ,aAGVC,WAAY,CACVC,OAAQ,GACRC,gBAAiB,UACjBC,SAAU,WACVC,aAAc,EACdC,WAAY,wBACZC,UAAW,qDAGbC,cAAe,CACbJ,SAAU,gBAoCCK,EAhC4B,SAAAC,GACzC,IAAMC,EAAUhB,IADkC,EAEpBiB,oBAA+B,WAE3D,IADA,IAAMC,EAAiB,GACdC,EAAI,EAAGA,GAAKC,OAAOC,MAASC,OAAO,OAAQH,IAClDD,EAAKK,KAAKJ,GAEZ,OAAOD,KAPyC,mBAE3CM,EAF2C,KAElCC,EAFkC,KAoBlD,OAVAC,qBAAU,WACRC,YAAW,WACLH,GAAWA,EAAQI,QAAU,GAC/BH,EAAW,GAAD,mBAAKD,GAAL,CAAcA,EAAQI,OAAS,KAEzCH,EAAW,MAEZ,OACF,CAACD,IAGF,yBAAKK,UAAWb,EAAQb,WACrBqB,GACC,yBACEK,UAAWb,EAAQV,WACnBwB,MAAO,CAAEC,MAAM,GAAD,OAAuB,IAAjBP,EAAQI,OAAgB,GAA9B,UC7ClB5B,EAASC,aAAW,SAAAC,GAAK,MAAK,CAClCC,UAAW,CACTC,QAAS,OACT4B,cAAe,UAGjBC,KAAM,CACJC,SAAU,SAwBCC,EApBwB,SAAApB,GAAU,IAAD,EACbA,EAAzBqB,kBADsC,MACzB,QADyB,EAExCpB,EAAUhB,IAF8B,EAIxBiB,mBAASI,MAASC,OAAOc,IAJD,mBAIvCC,EAJuC,KAIlCC,EAJkC,KAY9C,OANAZ,qBAAU,WACRa,aAAY,WACVD,EAAOjB,MAASC,OAAOc,MACtB,OACF,CAACC,IAGF,yBAAKR,UAAWb,EAAQb,WACtB,0BAAM0B,UAAWb,EAAQiB,MAAOI,GAChC,kBAAC,EAAD,QC9BAG,EAAYvC,YAAW,CAC3BE,UAAW,CACTM,SAAU,QACVgC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,IAAK,EACLpC,gBAAiB,UACjBJ,QAAS,OACTyC,eAAgB,SAChBC,WAAY,SACZd,cAAe,UAGjBe,UAAW,CACTvC,gBAAiB,UACjBwC,OAAQ,qBACRtC,aAAc,GACdqB,MAAO,MACPkB,MAAO,WAGTC,aAAc,CACZ9C,QAAS,OACT2B,MAAO,MACPc,eAAgB,iBAGlBM,IAAK,CACHH,OAAQ,qBACRtC,aAAc,iBAgBH0C,EAZQ,SAAArC,GACrB,IAAMC,EAAUwB,EAAUzB,GAE1B,OACE,yBAAKc,UAAWb,EAAQb,WACtB,yBAAK0B,UAAWb,EAAQ+B,WACtB,kBAAC,EAAD,SCjCOM,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75645112.chunk.js","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { relative } from 'path';\r\n\r\ninterface SecondsInterfaceProps {\r\n  [x: string]: any;\r\n}\r\n\r\nconst styles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    margin: '20px 80px',\r\n  },\r\n\r\n  secondsBox: {\r\n    height: 10,\r\n    backgroundColor: '#90A4AE',\r\n    position: 'relative',\r\n    borderRadius: 2,\r\n    transition: 'width 1500ms ease-out',\r\n    boxShadow: 'inset 0 1px 2px #1a1a1a, inset 0 -1px 2px #1a1a1a',\r\n  },\r\n\r\n  secondsNumber: {\r\n    position: 'absolute',\r\n  },\r\n}));\r\n\r\nconst Seconds: FC<SecondsInterfaceProps> = props => {\r\n  const classes = styles();\r\n  const [seconds, setSeconds] = useState<number[] | undefined>(() => {\r\n    const temp: number[] = [];\r\n    for (let i = 1; i <= Number(moment().format('ss')); i++) {\r\n      temp.push(i);\r\n    }\r\n    return temp;\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      if (seconds && seconds.length <= 58) {\r\n        setSeconds([...seconds, seconds.length + 1]);\r\n      } else {\r\n        setSeconds([]);\r\n      }\r\n    }, 1000);\r\n  }, [seconds]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {seconds && (\r\n        <div\r\n          className={classes.secondsBox}\r\n          style={{ width: `${(seconds.length * 100) / 60}%` }}\r\n        ></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Seconds;\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport Seconds from './Seconds';\r\n\r\ninterface TimerInterfaceProps {\r\n  timeFormat?: string;\r\n}\r\n\r\nconst styles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n\r\n  time: {\r\n    fontSize: 400,\r\n  },\r\n}));\r\n\r\nconst Timer: FC<TimerInterfaceProps> = props => {\r\n  const { timeFormat = 'HH:mm' } = props;\r\n  const classes = styles();\r\n\r\n  const [now, setNow] = useState(moment().format(timeFormat));\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setNow(moment().format(timeFormat));\r\n    }, 1000);\r\n  }, [now]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <span className={classes.time}>{now}</span>\r\n      <Seconds />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Timer from './Timer';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    position: 'fixed',\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    top: 0,\r\n    backgroundColor: '#263238',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n  },\r\n\r\n  timerBody: {\r\n    backgroundColor: '#1a1a1a',\r\n    border: '40px solid #141414',\r\n    borderRadius: 20,\r\n    width: '60%',\r\n    color: '#fafafa',\r\n  },\r\n\r\n  legContainer: {\r\n    display: 'flex',\r\n    width: '50%',\r\n    justifyContent: 'space-between',\r\n  },\r\n\r\n  leg: {\r\n    border: '15px solid #141414',\r\n    borderRadius: '0 0 5px 5px',\r\n  },\r\n});\r\n\r\nconst TimerContainer = props => {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.timerBody}>\r\n        <Timer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimerContainer;\r\n","import React from 'react';\nimport './App.css';\nimport TimerContainer from './component/TimerContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TimerContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}